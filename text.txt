ex2.cpp:
/*
	Виртуальное наследование. Проблемы: дублируется информация, 
	у базового класса будет дважды вызываться конструктор и деструктор (разные объекты). 
	Как будет выглядеть в памяти: 
		super_base_data
		base_1_data 
		super_base_data
		base_2_data 
		derived

	Добавляем virtual, как в памяти:
	void* vbpt = 0xAABB;
	base_1_data
	void* vbpt = 0xAABB;
	base_2_data
	derived
	super_base_data[0xAABB]

	У нас получается один экземпляр. Не будет два инстанса.
*/

ex3.cpp:
23 // мемберный
31 // не мемберный
39 // не мемберный
/*
	Перегрузка операторов. 
	Мы можем применять арифметическую операции к пользовательским типом. 
	Таким операторов можно сделать много. 
	Если приходит один объект, то он должен быть мемберным. 
	Если два аргумента, то его нужно делать как френд. 
*/


static.cpp:
/*
	Static. Если это обычная функция, то мы ее просто можем вызвать. 
	Но если ее пометить как static, то теперь ее нужно будет вызывать ::. 
	Грубо говоря static говорит, что метод или поле, он теперь не принадлежит какому либо объекту (инстансу), 
	он будет общий для всех объектов, созданных от этого класса.
*/